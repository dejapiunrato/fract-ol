#include "../minilibx_linux/mlx.h"
#include <fcntl.h>			// open
#include <unistd.h>			// close, read, write
#include <stdlib.h>			// malloc, free, exit
#include <stdio.h>			// perror
#include <string.h>			// strerror
#include <math.h>			// mathematic functions
# include <X11/X.h>			
# include <X11/keysym.h>

#define WIDTH	400
#define HEIGTH	400

typedef struct	s_img
{
	void	*img;
	char	*addr;
	int		bpp;
	int		line_len;
	int		endian;
}	t_img;

typedef struct s_shape
{
	char	*name;
	void	*mlx;
	void	*win;
	t_img	img;
}	t_shape;

int	close_shape(t_shape *shape)
{
	if (shape->img.img)
		mlx_destroy_image(shape->mlx, shape->img.img);
	if (shape->win)
		mlx_destroy_window(shape->mlx, shape->win);
	if (shape->mlx)
	{
		mlx_destroy_display(shape->mlx);
		free(shape->mlx);
	}
	exit(EXIT_FAILURE);
}

void	start_events(t_shape *shape)
{
	// [ ] Cerrar al clicar la X
	mlx_hook(shape->win, DestroyNotify, StructureNotifyMask, close_shape, shape);
	// [ ] Cerrar al pulsar Esc
	// [ ] Zoom in y Zoom out con la rueda del ratÃ³n
	// [ ] Moverse arriba, abajo, derecha e izquierda con las flechas
}

static void	malloc_error(void)
{
	perror("malloc() failure\n");
	exit(EXIT_FAILURE);
}

static void	free_display(t_shape *shape)
{
	mlx_destroy_display(shape->mlx);
	free(shape->mlx);
	malloc_error();
}

void	*start_shape(t_shape *shape)
{
	// [X] Iniciar instancia
	shape->mlx = mlx_init();
	if (!shape->mlx)
		malloc_error();

	// [X] Iniciar ventana
	shape->win = mlx_new_window(shape->mlx, WIDTH, HEIGTH, shape->name);
	if (!shape->win)
		free_display(shape);

	// [X] Iniciar imagen
 	shape->img.img = mlx_new_image(shape->mlx, WIDTH, HEIGTH);
	if (!shape->img.img)
		free_display(shape);
	shape->img.addr = mlx_get_data_addr(shape->img.img, &shape->img.bpp, &shape->img.line_len, &shape->img.endian);

	// [ ] Capturar eventos start_events(shape)
	start_events(shape);
	mlx_loop(shape->mlx);
}

int check_error(int argc, char **argv, t_shape *shape)
{
	if (argc != 2)
	{
		printf("Choose shape:\n\t./prueba square\n\t./prueba triangle\n");
		return (1);
	}
	else
		shape->name = argv[1];
	if (strncmp(shape->name, "square", 6) != 0 && strncmp(shape->name, "triangle", 8) != 0)
	{
		printf("Choose accepted: shape\n\t./prueba square\n\t./prueba triangle\n");
		return (1);
	}
	return (0);

}

int	main(int argc, char **argv)
{
	t_shape	shape;

	memset(&shape, 0, sizeof(t_shape));
	if (check_error(argc, argv, &shape))
		return (1);
	start_shape(&shape);
	return (0);
}
